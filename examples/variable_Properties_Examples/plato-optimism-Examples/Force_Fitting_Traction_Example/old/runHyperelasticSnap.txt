from jax import grad
from jax import jit
from optimism import EquationSolver
from optimism import VTKWriter
from optimism import FunctionSpace
from optimism import Interpolants
from optimism import Mechanics
from optimism import Mesh
from optimism import Objective
from optimism import QuadratureRule
from optimism import ReadExodusMesh
from optimism import SparseMatrixAssembler
from optimism.FunctionSpace import DofManager
from optimism.FunctionSpace import EssentialBC
from optimism.material import Neohookean

import jax.numpy as np
import numpy as onp
from optimism.inverse import AdjointFunctionSpace
from collections import namedtuple

EnergyFunctions = namedtuple('EnergyFunctions',
                            ['energy_function_coords',
                             'nodal_forces'])

class NodalCoordinateOptimization:

    def __init__(self):
        self.writeOutput = True

        self.quad_rule = QuadratureRule.create_quadrature_rule_on_triangle(degree=2)

        self.ebcs = [
            EssentialBC(nodeSet='bottom_sideset', component=1),

            EssentialBC(nodeSet='right_sideset', component=0),
            EssentialBC(nodeSet='left_sideset', component=0),

            # EssentialBC(nodeSet='left_roller_sideset', component=0),
            # EssentialBC(nodeSet='right_roller_sideset', component=0),

            EssentialBC(nodeSet='top_sideset', component=1)
        ]

        G_eq = 0.855 # MPa
        K_eq = 1000*G_eq # MPa

        shearModulus = G_eq # MPa
        bulkModulus = K_eq # MPa
        youngModulus = 9.0*bulkModulus*shearModulus / (3.0*bulkModulus + shearModulus)
        poissonRatio = (3.0*bulkModulus - 2.0*shearModulus) / 2.0 / (3.0*bulkModulus + shearModulus)
        props = {
            'elastic modulus': youngModulus,
            'poisson ratio': poissonRatio,
            'version': 'coupled'
        }
        self.mat_model = Neohookean.create_material_model_functions(props)

        self.eq_settings = EquationSolver.get_settings(
            use_incremental_objective=False,
            max_trust_iters=500,
            tr_size=0.25,
            min_tr_size=1e-15,
            tol=5e-8
        )

        self.input_mesh = './snap_cell.exo'

        maxDisp = 65

        self.maxDisp = -1.0 * maxDisp
        self.plot_file = 'disp_control_response.npz'
        self.stages = 1
        steps_per_stage = 65
        self.steps = self.stages * steps_per_stage

    def create_field(self, Uu, disp):
        def get_ubcs(disp):
            V = np.zeros(self.mesh.coords.shape)
            index = (self.mesh.nodeSets['top_sideset'], 1)
            V = V.at[index].set(disp)
            return self.dof_manager.get_bc_values(V)

        return self.dof_manager.create_field(Uu, get_ubcs(disp))

    def reload_mesh(self):
        origMesh = ReadExodusMesh.read_exodus_mesh(self.input_mesh)
        self.mesh = Mesh.create_higher_order_mesh_from_simplex_mesh(origMesh, order=2, createNodeSetsFromSideSets=True)

        func_space = FunctionSpace.construct_function_space(self.mesh, self.quad_rule)
        self.dof_manager = DofManager(func_space, 2, self.ebcs)

        self.stateNotStored = True
        self.state = []

    def run_simulation(self):

        # methods defined on the fly
        func_space = FunctionSpace.construct_function_space(self.mesh, self.quad_rule)
        mech_funcs = Mechanics.create_mechanics_functions(func_space, mode2D='plane strain', materialModel=self.mat_model)

        def energy_function_all_dofs(U, p):
            internal_variables = p[1]
            return mech_funcs.compute_strain_energy(U, internal_variables)

        def energy_function(Uu, p):
            U = self.create_field(Uu, p.bc_data)
            return energy_function_all_dofs(U, p)

        nodal_forces = jit(grad(energy_function_all_dofs, argnums=0))

        def assemble_sparse(Uu, p):
            U = self.create_field(Uu, p.bc_data)
            internal_variables = p[1]
            element_stiffnesses = mech_funcs.compute_element_stiffnesses(U, internal_variables)
            return SparseMatrixAssembler.\
                assemble_sparse_stiffness_matrix(element_stiffnesses, func_space.mesh.conns, self.dof_manager)
    
        def store_force_displacement(Uu, dispval, force, disp):
            U = self.create_field(Uu, p.bc_data)
            f = nodal_forces(U, p)

            index = (self.mesh.nodeSets['top_sideset'], 1)

            force.append( onp.sum(onp.array(f.at[index].get())) )
            disp.append( dispval )

            with open(self.plot_file,'wb') as f:
                np.savez(f, force=force, displacement=disp)

        def write_vtk_output(Uu, p, step):
            U = self.create_field(Uu, p.bc_data)
            plotName = 'output-'+str(step).zfill(3)
            writer = VTKWriter.VTKWriter(self.mesh, baseFileName=plotName)

            writer.add_nodal_field(name='displ', nodalData=U, fieldType=VTKWriter.VTKFieldType.VECTORS)

            energyDensities = mech_funcs.compute_output_energy_densities_and_stresses(U, p.state_data)[0]
            cellEnergyDensities = FunctionSpace.project_quadrature_field_to_element_field(func_space, energyDensities)
            writer.add_cell_field(name='strain_energy_density',
                                  cellData=cellEnergyDensities,
                                  fieldType=VTKWriter.VTKFieldType.SCALARS)
            writer.write()

        # problem set up
        Uu = self.dof_manager.get_unknown_values(np.zeros(self.mesh.coords.shape))
        ivs = mech_funcs.compute_initial_state()
        p = Objective.Params(bc_data=0., state_data=ivs)
        precond_strategy = Objective.PrecondStrategy(assemble_sparse)
        self.objective = Objective.Objective(energy_function, Uu, p, precond_strategy)

        # loop over load steps
        disp = 0.
        fd_force = []
        fd_disp = []

        store_force_displacement(Uu, disp, fd_force, fd_disp)
        self.state.append((Uu, p))

        steps_per_stage = int(self.steps / self.stages)
        disp_inc = self.maxDisp / steps_per_stage
        for step in range(1, steps_per_stage+1):

            print('--------------------------------------')
            print('LOAD STEP ', step)
            disp += disp_inc
            p = Objective.param_index_update(p, 0, disp)
            Uu, solverSuccess = EquationSolver.nonlinear_equation_solve(self.objective, Uu, p, self.eq_settings)

            U = self.create_field(Uu, p.bc_data)
            ivs = mech_funcs.compute_updated_internal_variables(U, p.state_data)
            p = Objective.param_index_update(p, 1, ivs)

            store_force_displacement(Uu, disp, fd_force, fd_disp)
            self.state.append((Uu, p))

        self.stateNotStored = False

    def setup_energy_functions(self):
        shapeOnRef = Interpolants.compute_shapes(self.mesh.parentElement, self.quad_rule.xigauss)

        def energy_function_all_dofs(U, ivs, coords):
            adjoint_func_space = AdjointFunctionSpace.construct_function_space_for_adjoint(coords, shapeOnRef, self.mesh, self.quad_rule)
            mech_funcs = Mechanics.create_mechanics_functions(adjoint_func_space, mode2D='plane strain', materialModel=self.mat_model)
            return mech_funcs.compute_strain_energy(U, ivs)

        def energy_function_coords(Uu, p, ivs, coords):
            U = self.create_field(Uu, p.bc_data)
            return energy_function_all_dofs(U, ivs, coords)

        nodal_forces = grad(energy_function_all_dofs, argnums=0)

        return EnergyFunctions(energy_function_coords, jit(nodal_forces))

    def compute_energy_quantities(self, uSteps, pSteps, ivsSteps, coordinates, nodal_forces, strain_energy):
        index = (self.mesh.nodeSets['top_sideset'], 1)

        totalWork = 0.0

        totalWorkStored = []
        strainEnergyStored = []
        dissipationStored = []

        for step in range(1, self.steps+1):
            Uu = uSteps[step]
            p = pSteps[step]
            ivs = ivsSteps[step]
            U = self.create_field(Uu, p.bc_data)
            force = np.array(nodal_forces(U, ivs, coordinates).at[index].get())
            disp = U.at[index].get()

            Uu_prev = uSteps[step-1]
            p_prev = pSteps[step-1]
            ivs_prev = ivsSteps[step-1]
            U_prev = self.create_field(Uu_prev, p_prev.bc_data)
            force_prev = np.array(nodal_forces(U_prev, ivs_prev, coordinates).at[index].get())
            disp_prev = U_prev.at[index].get()

            totalWork += 0.5*np.tensordot((force + force_prev),(disp - disp_prev), axes=1)
            dissipation = totalWork - strain_energy(Uu, p, ivs, coordinates)

            totalWorkStored.append(totalWork)
            dissipationStored.append(dissipation)
            strainEnergyStored.append(strain_energy(Uu, p, ivs, coordinates))

        with open("energy_histories.npz",'wb') as f:
            np.savez(f, totalWork=totalWorkStored, dissipation=dissipationStored, strainEnergy=strainEnergyStored)

    def compute_output(self):
        if self.stateNotStored:
            self.run_simulation()

        parameters = self.mesh.coords
        energyFuncs = self.setup_energy_functions()

        uSteps = np.stack([self.state[i][0] for i in range(0, self.steps+1)], axis=0)
        ivsSteps = np.stack([self.state[i][1].state_data for i in range(0, self.steps+1)], axis=0)
        pSteps = [self.state[i][1] for i in range(0, self.steps+1)]

        self.compute_energy_quantities(uSteps, pSteps, ivsSteps, parameters, energyFuncs.nodal_forces, jit(energyFuncs.energy_function_coords)) 



if __name__ == '__main__':
    nco = NodalCoordinateOptimization()
    nco.reload_mesh()
    nco.compute_output()
